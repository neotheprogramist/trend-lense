type ApiClientErrors = variant {
  Http : record { status : nat };
  Reject : record { code : RejectionCode; message : text };
};
type ApiData = record {
  api_key : text;
  passphrase : opt text;
  exchange : Exchange;
};
type Balance = record {
  balance : text;
  hold : text;
  available : text;
  currency : text;
};
type Candle = record {
  close_price : float64;
  lowest_price : float64;
  timestamp : nat64;
  highest_price : float64;
  open_price : float64;
};
type Exchange = variant { Okx; Coinbase };
type ExchangeErrors = variant {
  ApiClientError : ApiClientErrors;
  InvalidTimestamps;
  MissingIndex;
  MissingPair;
  DeserializationFailed : record { message : text };
  MissingApiKey;
  UnsupportedPairFormat;
};
type GeneralBalanceRequest = record { currency : opt vec text };
type GeneralInstrumentsRequest = record {
  instrument_id : opt Pair;
  instrument_type : InstrumentType;
};
type GeneralPostOrderRequest = record {
  margin_currency : opt text;
  side : OrderSide;
  size : float64;
  trade_mode : TradeMode;
  order_type : OrderType;
  instrument_id : text;
  order_price : opt float64;
  position_side : opt PositionSide;
};
type Instruction = record {
  api_key : text;
  request : Request;
  exchange : Exchange;
};
type Instrument = record {
  instrument_id : Pair;
  instrument_type : InstrumentType;
};
type InstrumentType = variant { Spot; Swap; Futures; Option; Margin };
type OrderData = record { code : text };
type OrderSide = variant { Buy; Sell };
type OrderType = variant { Fok; Ioc; Limit; PostOnly; Market };
type Pair = record { base : text; quote : text };
type PositionSide = variant { Short; Long };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Request = variant {
  Empty;
  Instruments : GeneralInstrumentsRequest;
  PostOrder : GeneralPostOrderRequest;
  Balances : GeneralBalanceRequest;
};
type Response = variant {
  Instruments : vec Instrument;
  Order : OrderData;
  Balances : vec Balance;
};
type Result = variant { Ok : vec Candle; Err : ExchangeErrors };
type Result_1 = variant { Ok : bool; Err : ExchangeErrors };
type Result_2 = variant { Ok : Response; Err : ExchangeErrors };
type Result_3 = variant { Ok : nat32; Err : ExchangeErrors };
type TradeMode = variant { Cash; SpotIsolated; Isolated; Cross };
service : () -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  add_instruction : (Instruction) -> (nat32);
  delete_transaction : (nat32) -> ();
  get_instruments : (Exchange, InstrumentType) -> (vec Pair) query;
  get_last_timestamp : (Exchange, text) -> (opt nat64) query;
  get_requests : () -> (opt vec vec Instruction) query;
  get_signature_string : (nat32) -> (text) query;
  get_transaction : (nat32) -> (opt vec Instruction) query;
  initialize_pair : (text, Exchange) -> ();
  pull_candles : (text, Exchange, nat64, nat64) -> (Result);
  refresh_instruments : (Exchange, InstrumentType) -> (Result_1);
  register_api_key : (ApiData) -> (bool);
  remove_api_key : (text) -> (opt ApiData);
  run_request : (nat32, text, text, nat64) -> (Result_2);
  split_transaction : (vec ApiData, text, OrderSide, float64, nat32) -> (
      Result_3,
    );
}
